networks:
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  mysql:
    build:
      context: ./mysql
      dockerfile: ./Dockerfile
      args:
        - MYSQL_IMAGE=${MYSQL_IMAGE}
        - MYSQL_VERSION=${MYSQL_VERSION}
    container_name: mysql
    image: docker-mysql:${MYSQL_VERSION}
    environment:
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TIMEZONE}
    volumes:
      - ${MYSQL_HOST_DATA_PATH}:${MYSQL_CONTAINER_DATA_PATH}
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    # 降低mysql容器的内存占用
    ulimits:
      nproc: 65535
      nofile:
        soft: 26677
        hard: 46677
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      backend:
        ipv4_address: 172.20.0.4

  redis:
    build:
      context: ./redis
      dockerfile: ./Dockerfile
    container_name: redis
    image: docker-redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./redis/log/redis.log:/var/log/redis/redis-server.log
      - ${REDIS_HOST_DATA_PATH}:${REDIS_CONTAINER_DATA_PATH}
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      backend:
        ipv4_address: 172.20.0.5

  fpm:
    build:
      context: fpm
      dockerfile: ./Dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
        - INSTALL_COMPOSER=${PHP_INSTALL_COMPOSER}
        - INSTALL_XDEBUG=${PHP_INSTALL_XDEBUG}
        - INSTALL_REDIS=${PHP_INSTALL_REDIS}
        - INSTALL_JIEBA=${PHP_INSTALL_JIEBA}
        - INSTALL_SWOOLE=${PHP_INSTALL_SWOOLE}
        - INSTALL_IMAGICK=${PHP_INSTALL_IMAGICK}
        - IMAGICK_VERSION=${PHP_IMAGICK_VERSION}
        - INSTALL_PHALCON=${PHP_INSTALL_PHALCON}
        - PHALCON_VERSION=${PHP_PHALCON_VERSION}
        - USER_ID=${USER_ID}
    container_name: fpm
    image: docker-fpm:${PHP_VERSION}
    working_dir: ${CONTAINER_PROJECT_PATH}
    user: ${USER_ID}:${USER_ID}
    ports:
      - "9000:9000"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
      - "www.qmsmain.localhost:172.20.0.3"
      - "www.auth.localhost:172.20.0.3"
    volumes:
      - ./fpm/conf.d:/usr/local/etc/php.conf
      - ./fpm/php.ini:/usr/local/etc/php/php.ini
      - ${HOST_PROJECT_PATH}:${CONTAINER_PROJECT_PATH}
      - ./cache/composer-cache:/home/docker/.composer
      - ./common/.zshrc:/home/docker/.zshrc
      - ./common/.vimrc:/home/docker/.vimrc
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      backend:
        ipv4_address: 172.20.0.7

  nginx:
    build: ./nginx
    container_name: nginx
    image: docker-nginx
    ports:
      - "80:80"
      - "443:443"
    links:
      - "fpm"
    depends_on:
      - "fpm"
    volumes:
      - ${HOST_PROJECT_PATH}:${CONTAINER_PROJECT_PATH}
      - ./nginx/site-enabled:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/log:/nginx/log
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      backend:
        ipv4_address: 172.20.0.3

  workspace:
    build:
      context: ./workspace
      args:
        - USER_ID=${USER_ID}
        - UBUNTU_VERSION=${UBUNTU_VERSION}
        - GIT_VERSION=${GIT_VERSION}
    container_name: workspace
    image: docker-workspace:${UBUNTU_VERSION}
    working_dir: ${CONTAINER_PROJECT_PATH}
    volumes:
      - ${HOST_PROJECT_PATH}:${CONTAINER_PROJECT_PATH}
      - /usr/bin/git:/usr/bin/git
      - ./common/.zshrc:/home/docker/.zshrc
      - ./common/.vimrc:/home/docker/.vimrc
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    tty: true
    networks:
      backend:
        ipv4_address: 172.20.0.8

  node:
    build:
      context: ./node
      args:
        - NODE_VERSION=${NODE_VERSION}
        - PNPM_VERSION=${PNPM_VERSION}
        - USER_ID=${USER_ID}
    container_name: node
    image: docker-node:${NODE_VERSION}
    user: ${USER_ID}:${USER_ID}
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
      - "www.auth.localhost:172.20.0.3"
      - "www.miniqms.localhost:172.20.0.3"
      - "www.template.localhost:172.20.0.3"
      - "www.qmsmain.localhost:172.20.0.3"
    volumes:
      - ./node/npmrc:/etc/npmrc
      - ${HOST_PROJECT_PATH}:${CONTAINER_PROJECT_PATH}
      - ./cache/npm-cache:/home/node/.npm
      - ./cache/pnpm-cache:/home/node/.local/share/pnpm/store
    ports:
      - "8090-8099:8090-8099"
    tty: true
    networks:
      backend:
        ipv4_address: 172.20.0.2

  java:
    build:
      context: ./java
      args:
        - JDK_VERSION=${JDK_VERSION}
        - USER_ID=${USER_ID}
        - BUILD_OPENCV=${BUILD_OPENCV}
    container_name: java
    image: docker-java:${JDK_VERSION}
    environment:
      - JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5750 -Xmx256m -Xms128m
    user: ${USER_ID}:${USER_ID}
    volumes:
      - ./java/run.sh:/usr/bin/run
      - ./java/conf:/usr/local/openjdk-11/conf
      - ${HOST_PROJECT_PATH}:${CONTAINER_PROJECT_PATH}
      - ${JDK_HOST_MAVEN_PATH}:/usr/local/maven
      - ${JDK_HOST_GRADLE_PATH}:/usr/local/gradle
      - ${JDK_HOST_JAVAFX_PATH}:/usr/local/lib/javafx
      - ./cache/gradle-cache:/home/docker/.gradle
      - ./cache/maven-cache:/home/docker/.m2
      - ./cache/javafx-cache:/home/docker/.openjfx
    extra_hosts:
      - "www.auth.localhost:172.20.0.3"
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "5750:5750"
      - "8000-8089:8000-8089"
    tty: true
    networks:
      backend:
        ipv4_address: 172.20.0.6

  go:
    build:
      context: ./go
    container_name: go
    image: docker-go
    volumes:
      - ${HOST_PROJECT_PATH}:${CONTAINER_PROJECT_PATH}
      - ./cache/go-cache:/usr/local/go
    tty: true
    ports:
      - "3000:3000"
    networks:
      backend:
        ipv4_address: 172.20.0.10

  mongo:
    build:
      context: ./mongo
      args:
        - MONGO_VERSION=${MONGO_VERSION}
    container_name: mongo
    image: docker-mongo:${MONGO_VERSION}
    user: ${USER_ID}:${USER_ID}
    environment:
      - MONGO_DATA_DIR=${MONGO_CONTAINER_DATA_DIR}
      - MONGO_LOG_DIR=${MONGO_CONTAINER_LOG_DIR}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - ${HOST_PROJECT_PATH}:${CONTAINER_PROJECT_PATH}
      - ${MONGO_HOST_DATA_DIR}:${MONGO_CONTAINER_DATA_DIR}
      - ${MONGO_HOST_LOG_DIR}:${MONGO_CONTAINER_LOG_DIR}
    ports:
      - "${MONGO_PORT}:27017"
    networks:
      backend:
        ipv4_address: 172.20.0.11

  python:
    build:
      context: ./python
      args:
        - USER_ID=${USER_ID}
    container_name: python
    image: docker-python
    tty: true
    user: ${USER_ID}:${USER_ID}
    volumes:
      - ./common/.zshrc:/home/docker/.zshrc
      - ./common/.vimrc:/home/docker/.vimrc
      - ${HOST_PROJECT_PATH}:${CONTAINER_PROJECT_PATH}
      - ./python/aws:/home/docker/.aws
      - ${DATA_PATH}:/data
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      backend:
        ipv4_address: 172.20.0.12
